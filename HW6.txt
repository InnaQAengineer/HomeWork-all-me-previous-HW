Beet Seed  — відпрацюй навички на базовому рівні.
1. Склади порівняльну таблицю функціонального, нефункціонального і пов’язаного зі змінами видів тестування. 
Порівняння має містити такі блоки:


ВИДИ ТЕСТУВАННЯ
що перевіряється
коли застосовується
обмеження
особливості
ФУНКЦІОНАЛЬНЕ
Перевіряються функції і особливості, а також взаємодії з іншими системами,перевіряють, чи відповідає ПЗ визначеним вимогам
Може застосовуватися на всіх рівнях тестування
Розглядає тільки зовнішню поведінку системи.
 імітує фактичне використання системи
НЕФУНКЦІОНАЛЬНЕ
нефункціональне тестування з'ясовує, наскільки добре працює система загалом, описує тести, необхідні для визначення характеристик програмного забезпечення, які можуть бути виміряні різними величинами
зазвичай виконується після функціонального тестування перед випуском програмного забезпечення в експлуатацію
через те, що нефункціональні вимоги можуть бути складними для перевірки, нефункціональне тестування може бути тривалим процесом, який вимагає ретельного планування і виконання
включає такі властивості, як продуктивність, масштабованість, надійність, безпека, сумісність, доступність та інші
ТЕСТУВАННЯ,ПОВ’ЯЗАНЕ ЗІ ЗМІНАМИ
перевіряємо систему після зміни, які були внесені для виправлення помилок, вдосконалення функцій, додавання нового функціоналу або для забезпечення сумісності з іншими програмними продуктами або обладнанням
може застосовуватися на кожному рівні тестування  після проведення необхідних змін, таких як виправлення бага / дефекту, особливо Перед випуском нової версії ПЗ
можуть мати обмеження такі,наприклад, як Обмеження відсутності достатньої документації або Обмеження ресурсів,Обмеження доступу до коду.
Орієнтація на порівняння до та після внесення змін, ретельний моніторинг результатів взаємодії зі системою після змін





2. Поясни, в чому різниця між регресією та ретестингом (5 речень).
Регресія - це тестування для перевірки чи не виникли нові помилки у програмі після внесення змін. А ретестінг - це перетест вже проведених тестів, щоб перевірити чи були виправлені  виявлені. Отже,основна різниця в тому, що регресія виконується для перевірки наявності нових помилок,тоді як ретестинг виконується для перевірки раніше виявлених помилок.Регресія виконується після кожного циклу розробки, коли в програмі були внесені зміни, а ретестінг коли були виправлені знайдені помилки. 


Mighty Beet — детальніше заглибся в практику. 
1. Виконай завдання попереднього рівня.
2. Як ти вважаєш, чи можливе для продукту проведення тільки функціонального тестування, без перевірки нефункціональних вимог?
Якщо так – в яких випадках? 
Якщо ні – чому? 
Обґрунтуй свою відповідь.
Так, можливе проведення тільки функціонального тестування продукту без перевірки нефункціональних вимог. Однак, це не є повноцінним тестуванням, оскільки нефункціональні вимоги також є важливими для якості продукту.
Тільки в дуже обмеженій кількості випадків можна провести тільки функціональне тестування без перевірки нефункціональних вимог.
Один з таких випадків - це коли продукт є дуже простим, має незначну функціональність та не взаємодіє з іншими системами. У цьому випадку можна обійтися без перевірки нефункціональних вимог.
Інший випадок, коли можна обмежитися тільки функціональним тестуванням, - це коли нефункціональні вимоги вже були перевірені в попередній версії продукту та були успішно виконані. У цьому випадку можна вважати, що продукт вже має відповідну якість та може бути випущений наступної версії без повторної перевірки нефункціональних вимог.
Отже, для забезпечення якості продукту важливо проводити повноцінне тестування, яке включає як функціональне, так і нефункціональне тестування.


3. Як ти розумієш необхідність проведення smoke (димового) тестування? Чи завжди воно є доречним?
Smoke testing - це перевірка, яка зазвичай виконується перед повноцінним тестуванням продукту. Його метою є перевірка основних функцій системи, щоб виявити потенційні проблеми, що можуть виникнути під час подальшого тестування.
Необхідність проведення smoke testing залежить від кількох факторів, зокрема:
Розмір проекту: Для великих проектів димове тестування може бути важливішим, оскільки це допоможе зекономити час та ресурси.
Складність продукту: Якщо продукт має складну архітектуру або включає в себе багато функцій, димове тестування може бути необхідним для виявлення проблем раніше, ніж вони стануть критичними.
Обмеження часу: Якщо вам необхідно виконати проект за обмежені терміни, то димове тестування може бути корисним інструментом.
Однак, є випадки, коли димове тестування може бути не доречним, наприклад:
Продукт з простою функціональністю: Якщо продукт має просту функціональність, то димове тестування може бути зайвим, оскільки його основні функції можна перевірити шляхом звичайного використання продукту.
Відсутність достатніх ресурсів: Якщо ви не маєте достатньої кількості ресурсів, таких як людські ресурси або обладнання, для проведення димового тестування, то це може бути нецікавим варіантом.
У кінці кінців, потреба в димовому тестуванні залежить від конкретних умов.


Mighty Beet — різнобічно опануй тематику уроку.
1. Виконай завдання двох попередніх рівнів.
2. Ти – засновник/ця стартапу і плануєш випустити на ринок мобільний застосунок для обміну світлинами котиків для iOS та Android пристроїв.
Користувачі можуть завантажувати фотографії котиків. Але не можуть завантажувати фотографії інших тварин/людей/об’єктів. Користувачі можуть додавати друзів, ставити “вподобайки”, залишати коментарі.

Завдння: Напиши 5 функціональних тест-кейсів, які перевіряли б роботу застосунку.
Lesson 6 HW  Mighty Beet
3. Напиши, які нефункціональні вимоги ти хотів/ла б  застосувати для продукту твого стартапу. 
Опиши перевірки, які б їх перевіряли (3-5 прикладів).
Швидкість: продукт повинен працювати швидко, щоб користувачі могли швидко знаходити бажані світлини та людей. Тут скоріш за все,підійде Performance and Load testing.
Інтуїтивний інтерфейс: продукт повинен мати інтуїтивний інтерфейс, щоб користувачі могли легко зрозуміти, як користуватися застосунком. Таку вимогу можна перевірити за допомогою Usability Testing.
Сумісність: продукт повинен бути сумісним з різними пристроями та програмним забезпеченням, щоб користувачі могли отримувати доступ до продукту з будь-якого пристрою.Це можна перевірити шляхом Configuration Testing.
Доступність: продукт повинен бути доступним, щоб користувачі з різних регіонів світу могли здійснювати авторизацію та користуватися застосунком. Мені здається,що тут теж підійде Usability Testing.
Масштабованість: продукт повинен бути масштабованим, щоб він міг працювати з великою кількістю користувачів і обробляти великі обсяги даних, для тестування даної вимоги підійде Volume Testing.




